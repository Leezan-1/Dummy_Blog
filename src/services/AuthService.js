
const { Users } = require("../models")
const { checkUserPassword, generatePassword } = require("../utils/password");
const CustomError = require("../utils/CustomError");
const { validateEmail, validateName, validatePswd } = require("../utils/validations");

class AuthService {

    // creates a new user
    static async signUpUser(newUserFormInfo) {
        let { fname, lname, email, password } = newUserFormInfo;

        validateEmail(email);
        validateName(fname);
        validateName(lname);
        validatePswd(password);
        // checks if there is any other user with same email address.
        let userExists = await this.getUserByEmail(email);
        if (userExists)
            throw new CustomError('User Already Exists', 409);

        // stores hashed password for user.
        let hashedPassword = await generatePassword(password);

        // auto generates username for new user
        let username = email.split('@')[0];

        // creates a new user.
        await Users.create({
            first_name: fname,
            last_name: lname,
            username: username,
            email: email,
            password: hashedPassword
        });
    }

    // authenticate user with credentials and gets user's info.
    static async loginUser(userInfo) {

        // user service handles validate user login info to authenticate
        let { email, password } = userInfo;
        validateEmail(email);
        validatePswd(password);

        // find users with email address.
        let dbUser = await this.getUserByEmail(userInfo.email);
        if (!dbUser)
            throw new CustomError('Email or Password did not match', 403);

        // check password is valid, if false send error
        if (!(await checkUserPassword(password, dbUser.password)))
            throw new CustomError('Email or password did not match', 403);

        // const { password, createdAt, ...cleanUserData } = user;

        return dbUser;
    }

    static async getUserById(userId) {
        const user = await Users.findByPk(userId, { raw: true });
        return user;
    }

    // gets user's information by email.
    static async getUserByEmail(email) {
        // user generated by this function is used all over the server.
        const user = await Users.findOne({ where: { email: email }, raw: true });
        return user;

    }
}

module.exports = AuthService;